#Область УправлениеСостоянием

&НаСервере
Процедура УправлениеФормойНаСервере(ИзмененныеРеквизиты = Неопределено, ЗависимыеЭлементы = Неопределено)
	Модель = РаботаСМодельюКлиентСервер.МодельОбъекта(ЭтотОбъект);
	РаботаСФормойКлиентСервер.УправлениеФормой(ЭтотОбъект, Модель, ИзмененныеРеквизиты, ЗависимыеЭлементы);	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеФормой(ИзмененныеРеквизиты = Неопределено)
	Перем ЗависимыеЭлементы;
	НаСервере = Ложь;
	Модель = РаботаСМодельюКлиентСервер.МодельОбъекта(ЭтотОбъект);
	РаботаСФормойКлиентСервер.УправлениеФормой(ЭтотОбъект, Модель, ИзмененныеРеквизиты, ЗависимыеЭлементы, НаСервере);
	Если НаСервере Тогда
		УправлениеФормойНаСервере(ИзмененныеРеквизиты, ЗависимыеЭлементы);
	КонецЕсли;
КонецПроцедуры

#Область ОбработчикиСобытийФормы

//@skip-warning
&НаКлиенте
Процедура ПриАктивизацииСтроки(Элемент)
	РаботаСФормойКлиентСервер.ПриАктивизацииСтроки(ЭтотОбъект, Элемент);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	РаботаСФормойКлиентСервер.НачалоВыбора(ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры

#Область ПриИзменении // При расчете может потребоваться изменить контекст, а сделать это можно только в модуле формы

//@skip-warning
//  Процедура продолжает расчет уже в контексте сервера. Такое разделение процедуры нужно для программного переключения контекста
&НаСервере
Процедура РассчитатьСостояниеНаСервере(ИзмененныеРеквизиты, ОбработанныеРеквизиты, Последовательность, ИспользованныеСвязи)
	Модель = РаботаСМодельюКлиентСервер.МодельОбъекта(ЭтотОбъект);
	РаботаСМодельюКлиентСервер.РассчитатьСостояние(ЭтотОбъект, Модель, ИзмененныеРеквизиты, ОбработанныеРеквизиты, Последовательность, ИспользованныеСвязи);
	УправлениеФормойНаСервере(ОбщийКлиентСервер.СоответствиеВМассив(ОбработанныеРеквизиты));
КонецПроцедуры

//  Процедура выполняет расчет в контексте клиента
&НаКлиенте
Процедура РассчитатьСостояние(ИзмененныеРеквизиты)
	Модель = РаботаСМодельюКлиентСервер.МодельОбъекта(ЭтотОбъект);
	Последовательность = Новый Структура("Список, Словарь", Новый СписокЗначений, Новый Соответствие);
	ОбработанныеРеквизиты = Новый Соответствие;
	ИспользованныеСвязи = Новый Соответствие;
	НаСервере = Ложь;
	РаботаСМодельюКлиентСервер.РассчитатьСостояние(ЭтотОбъект, Модель, ИзмененныеРеквизиты, ОбработанныеРеквизиты, Последовательность, ИспользованныеСвязи, НаСервере);
	Если НаСервере Тогда
		РассчитатьСостояниеНаСервере(ИзмененныеРеквизиты, ОбработанныеРеквизиты, Последовательность, ИспользованныеСвязи);
	Иначе
		УправлениеФормой(ОбщийКлиентСервер.СоответствиеВМассив(ОбработанныеРеквизиты));
	КонецЕсли;
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура ПриИзменении(Элемент)
	ОчиститьСообщения();
	Модель = РаботаСМодельюКлиентСервер.МодельОбъекта(ЭтотОбъект); 
	Параметр = Модель.Параметры[Модель.ПараметрыЭлементов[Элемент.Имя]];
	Если Параметр = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Параметр.ЭтоЭлементКоллекции Тогда
		ИзмененныеРеквизиты = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(РаботаСМодельюКлиентСервер.Реквизит(Параметр.Идентификатор, РаботаСМодельюКлиентСервер.ЗначениеПараметра(ЭтотОбъект, Модель, Модель.Параметры[Параметр.Коллекция + ".ИндексСтроки"])));
	Иначе
		ИзмененныеРеквизиты = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(РаботаСМодельюКлиентСервер.Реквизит(Параметр.Идентификатор));
	КонецЕсли;
	РассчитатьСостояние(ИзмененныеРеквизиты);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Модель = Новый ФиксированнаяСтруктура(РаботаСМодельюКлиентСервер.Модель("МодельЗаявкаНаОперацию"));

	//  Настройка зависимостей: Зависимый элемент <- Источник
	РаботаСМодельюКлиентСервер.Связь(ЭтотОбъект, Модель, "ДоговорКонтрагента", "Организация", "Отбор.Организация");
	РаботаСМодельюКлиентСервер.Связь(ЭтотОбъект, Модель, "ДоговорКонтрагента", "Контрагент", "Отбор.Контрагент");
	РаботаСМодельюКлиентСервер.Связь(ЭтотОбъект, Модель, "ТипОперацииБюджетирование", "ВидОперации", "ВидОперации");
	РаботаСМодельюКлиентСервер.Связь(ЭтотОбъект, Модель, "ПриходРасход", "ВидОперации", "ВидОперации");
	РаботаСМодельюКлиентСервер.Связь(ЭтотОбъект, Модель, "СуммаВзаиморасчетов", "СуммаДокумента", "Сумма");
	РаботаСМодельюКлиентСервер.Связь(ЭтотОбъект, Модель, "ДвиженияОперации.СуммаВзаиморасчетов", "ДвиженияОперации.Сумма", "Сумма");
	РаботаСМодельюКлиентСервер.Связь(ЭтотОбъект, Модель, "Комментарий", "_Комментарий", "Комментарий");

	//  Настройка элементов формы и их зависимостей: Элемент формы <- Параметры состояния
	РаботаСФормойКлиентСервер.Элемент(ЭтотОбъект, Модель, Элементы.ФормаОплаты, "ТипОперацииБюджетирование");
	РаботаСФормойКлиентСервер.Элемент(ЭтотОбъект, Модель, Элементы.СчетКонтрагента, "ФормаОплаты");
	РаботаСФормойКлиентСервер.Элемент(ЭтотОбъект, Модель, Элементы.КонтрагентРасчетов, "РасчетыЧерезТретьихЛиц");
	РаботаСФормойКлиентСервер.Элемент(ЭтотОбъект, Модель, Элементы.ДоговорРасчетов, "РасчетыЧерезТретьихЛиц");
	РаботаСФормойКлиентСервер.Элемент(ЭтотОбъект, Модель, Элементы.ГруппаРасчетыЧерезТретьихЛиц, "РасчетыЧерезТретьихЛиц");
	РаботаСФормойКлиентСервер.Элемент(ЭтотОбъект, Модель, Элементы.СуммаВзаиморасчетов, "ВалютаВзаиморасчетов,ВалютаДокумента");
	РаботаСФормойКлиентСервер.Элемент(ЭтотОбъект, Модель, Элементы.ВалютаВзаиморасчетов, "ВалютаВзаиморасчетов,ВалютаДокумента");
	РаботаСФормойКлиентСервер.Элемент(ЭтотОбъект, Модель, Элементы.СтраницаАналитикиБюджетирования, "ДвиженияОперации");
	РаботаСФормойКлиентСервер.Элемент(ЭтотОбъект, Модель, Элементы.ДвиженияОперацииСуммаВзаиморасчетов, "ВалютаВзаиморасчетов");
	РаботаСФормойКлиентСервер.Элемент(ЭтотОбъект, Модель, Элементы.ДвиженияОперацииСумма, "ВалютаДокумента");

	//Модель.Элементы["ДвиженияОперацииСуммаВзаиморасчетов"].НаСервере = Истина;
	//  Настройка параметров состояния объекта
	Модель.Параметры["ТипОперацииБюджетирование"].ВыражениеЗначения = "ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.ВидОперации, ""ТипОперацииБюджетирование"")";
	Модель.Параметры["ПриходРасход"].ВыражениеЗначения = "ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.ВидОперации, ""ПриходРасход"")";
	Модель.Параметры["СуммаДокумента"].НаСервере = Ложь;
	Модель.Параметры["СуммаВзаиморасчетов"].НаСервере = Ложь;
	Модель.Параметры["СуммаВзаиморасчетов"].ВыражениеЗначения = "Параметры.Сумма";
	Модель.Параметры["ДвиженияОперации"].НаСервере = Ложь;
	Модель.Параметры["ДвиженияОперации"].ЭтоСсылка = Ложь;
	Модель.Параметры["ДвиженияОперации.Сумма"].НаСервере = Ложь;
	Модель.Параметры["ДвиженияОперации.СуммаВзаиморасчетов"].НаСервере = Ложь;
	Модель.Параметры["ДвиженияОперации.СуммаВзаиморасчетов"].ВыражениеЗначения = "Параметры.Сумма";
	Модель.Параметры["ФормаОплаты"].НаСервере = Ложь;
	Модель.Параметры["РасчетыЧерезТретьихЛиц"].НаСервере = Ложь;
	Модель.Параметры["ВалютаВзаиморасчетов"].НаСервере = Ложь;
	Модель.Параметры["ВалютаДокумента"].НаСервере = Ложь;

	//  Настройка связанных по значению параметров Комментарий <- _Комментарий
	Модель.Параметры["_Комментарий"].НаСервере = Ложь;
	Модель.Параметры["_Комментарий"].ВыражениеЗначения = "Контекст.Объект.Комментарий";
	Модель.Параметры["Комментарий"].НаСервере = Ложь;
	Модель.Параметры["Комментарий"].ВыражениеЗначения = "Параметры.Комментарий";

	//  Специальный параметр для таблицы
	Параметр = РаботаСМодельюКлиентСервер.Параметр(ЭтотОбъект, Модель, "ДвиженияОперации.ИндексСтроки");
	Параметр.НаСервере = Ложь;
	Параметр.ПроверкаЗаполнения = Ложь;
	Параметр.ЭтоСсылка = Ложь;

	РаботаСМодельюКлиентСервер.ОпределитьПорядок(Модель);
	
	//  Связывание модели и формы. Первоначальный расчет параметров
	РаботаСФормой.УстановитьСвязьСЭлементамиФормы(ЭтотОбъект, Модель, Элементы);
	РаботаСМоделью.ХранилищеЗначений(ЭтотОбъект, Модель);
	РаботаСМоделью.РассчитатьПроизводныеПараметры(ЭтотОбъект, Модель);
	
	УправлениеФормойНаСервере();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#КонецОбласти
